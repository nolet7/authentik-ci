name: Deploy Authentik CI/CD

on:
  push:
    branches: [ "main" ]
    paths:
      - Dockerfile
      - docker-compose.yml
      - nginx.conf
      - .github/workflows/deploy-authentik.yml

env:
  VAULT_ADDR: http://192.168.0.116:8200
  VAULT_SECRET_PATH: secret/Dev-secret/authentik

jobs:
  fetch-secrets:
    name: Fetch Secrets from Vault
    runs-on: ubuntu-latest
    outputs:
      AUTHENTIK_SECRET_KEY: ${{ steps.vault-secrets.outputs.AUTHENTIK_SECRET_KEY }}
      POSTGRES_USER: ${{ steps.vault-secrets.outputs.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ steps.vault-secrets.outputs.POSTGRES_PASSWORD }}
      DATABASE_URL: ${{ steps.vault-secrets.outputs.DATABASE_URL }}
      SMTP_HOST: ${{ steps.vault-secrets.outputs.SMTP_HOST }}
      SMTP_PORT: ${{ steps.vault-secrets.outputs.SMTP_PORT }}
      SMTP_USER: ${{ steps.vault-secrets.outputs.SMTP_USER }}
      SMTP_PASS: ${{ steps.vault-secrets.outputs.SMTP_PASS }}
      SMTP_USE_TLS: ${{ steps.vault-secrets.outputs.SMTP_USE_TLS }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vault CLI
        run: |
          sudo apt-get update && sudo apt-get install -y vault jq

      - name: Authenticate to Vault (Token expected in CI secret VAULT_TOKEN)
        run: |
          echo "$VAULT_TOKEN" > token.txt
          vault login $(cat token.txt)

      - name: Retrieve secrets from Vault
        id: vault-secrets
        run: |
          secrets=$(vault kv get -format=json "$VAULT_SECRET_PATH" | jq -r '.data.data')
          echo "AUTHENTIK_SECRET_KEY=$(echo $secrets | jq -r .AUTHENTIK_SECRET_KEY)" >> $GITHUB_OUTPUT
          echo "POSTGRES_USER=$(echo $secrets | jq -r .POSTGRES_USER)" >> $GITHUB_OUTPUT
          echo "POSTGRES_PASSWORD=$(echo $secrets | jq -r .POSTGRES_PASSWORD)" >> $GITHUB_OUTPUT
          echo "DATABASE_URL=$(echo $secrets | jq -r .DATABASE_URL)" >> $GITHUB_OUTPUT
          echo "SMTP_HOST=$(echo $secrets | jq -r .SMTP_HOST)" >> $GITHUB_OUTPUT
          echo "SMTP_PORT=$(echo $secrets | jq -r .SMTP_PORT)" >> $GITHUB_OUTPUT
          echo "SMTP_USER=$(echo $secrets | jq -r .SMTP_USER)" >> $GITHUB_OUTPUT
          echo "SMTP_PASS=$(echo $secrets | jq -r .SMTP_PASS)" >> $GITHUB_OUTPUT
          echo "SMTP_USE_TLS=$(echo $secrets | jq -r .SMTP_USE_TLS)" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    needs: fetch-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: noletengine/authentik:latest
          build-args: |
            AUTHENTIK_SECRET_KEY=${{ needs.fetch-secrets.outputs.AUTHENTIK_SECRET_KEY }}
            POSTGRES_USER=${{ needs.fetch-secrets.outputs.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ needs.fetch-secrets.outputs.POSTGRES_PASSWORD }}
            DATABASE_URL=${{ needs.fetch-secrets.outputs.DATABASE_URL }}
            SMTP_HOST=${{ needs.fetch-secrets.outputs.SMTP_HOST }}
            SMTP_PORT=${{ needs.fetch-secrets.outputs.SMTP_PORT }}
            SMTP_USER=${{ needs.fetch-secrets.outputs.SMTP_USER }}
            SMTP_PASS=${{ needs.fetch-secrets.outputs.SMTP_PASS }}
            SMTP_USE_TLS=${{ needs.fetch-secrets.outputs.SMTP_USE_TLS }}

  deploy:
    name: Deploy via Argo CD
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Argo CD Sync
        run: |
          curl -X POST https://argocd.srespace.tech/api/v1/applications/authentik/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json"

