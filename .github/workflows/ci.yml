name: CI - Build and Push Authentik

on:
  push:
    branches:
      - master
    paths:
      - Dockerfile
      - docker-compose.yml
      - nginx.conf
      - .github/workflows/ci.yml

jobs:
  build-authentik:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
          apt-get update && apt-get install vault -y

      - name: Authenticate to Vault
        run: |
          vault login ${{ secrets.VAULT_TOKEN }}
        env:
          VAULT_ADDR: http://192.168.0.116:8200

      - name: Pull secrets from Vault
        run: |
          echo "AUTHENTIK_SECRET_KEY=$(vault kv get -field=AUTHENTIK_SECRET_KEY secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "POSTGRES_USER=$(vault kv get -field=POSTGRES_USER secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=$(vault kv get -field=POSTGRES_PASSWORD secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "DATABASE_URL=$(vault kv get -field=DATABASE_URL secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "SMTP_HOST=$(vault kv get -field=SMTP_HOST secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "SMTP_PORT=$(vault kv get -field=SMTP_PORT secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "SMTP_USER=$(vault kv get -field=SMTP_USER secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "SMTP_PASS=$(vault kv get -field=SMTP_PASS secret/Dev-secret/authentik)" >> $GITHUB_ENV
          echo "SMTP_USE_TLS=$(vault kv get -field=SMTP_USE_TLS secret/Dev-secret/authentik)" >> $GITHUB_ENV
        env:
          VAULT_ADDR: http://192.168.0.116:8200

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build \
            --build-arg AUTHENTIK_SECRET_KEY=$AUTHENTIK_SECRET_KEY \
            --build-arg POSTGRES_USER=$POSTGRES_USER \
            --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --build-arg DATABASE_URL=$DATABASE_URL \
            --build-arg SMTP_HOST=$SMTP_HOST \
            --build-arg SMTP_PORT=$SMTP_PORT \
            --build-arg SMTP_USER=$SMTP_USER \
            --build-arg SMTP_PASS=$SMTP_PASS \
            --build-arg SMTP_USE_TLS=$SMTP_USE_TLS \
            -t noletengine/authentik:latest .

      - name: Push Docker image
        run: docker push noletengine/authentik:latest

