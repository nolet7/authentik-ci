version: "3.8"

services:
  redis:
    image: redis:alpine
    container_name: authentik-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: authentik-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-changeme}
      POSTGRES_DB: ${PG_DB:-authentik}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${PG_USER:-authentik}"]
      interval: 10s
      timeout: 5s
      retries: 5

  authentik:
    image: noletengine/authentik:latest
    container_name: authentik-server
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    volumes:
      - media:/media
    expose:
      - "9000"
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_USE_TLS: ${SMTP_USE_TLS}

  worker:
    image: noletengine/authentik:latest
    container_name: authentik-worker
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    volumes:
      - media:/media
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_USE_TLS: ${SMTP_USE_TLS}

  nginx:
    image: nginx:alpine
    container_name: authentik-nginx
    restart: unless-stopped
    depends_on:
      - authentik
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
   #  - /etc/letsencrypt:/etc/letsencrypt:ro # Only if nginx is inside Docker

volumes:
  postgres_data:
  redis_data:
  media:

